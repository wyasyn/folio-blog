generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  hashedPin String   @map("hashed_pin")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model About {
  id          Int      @id @default(autoincrement())
  name        String
  title       String
  description String
  email       String   @unique
  phone       String?
  location    String?
  avatar      String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  experiences    Experience[]
  educations     Education[]
  skills         Skill[]
  socialLinks    SocialLink[]
  certifications Certification[]
  projects       Project[]
  testimonials   Testimonial[]
  techStack      TechStack[]
  hobbies        Hobby[]
  languages      Language[]
}

model TechStack {
  id      Int    @id @default(autoincrement())
  name    String
  level   String // e.g., Beginner, Intermediate, Advanced, Expert
  aboutId Int
  about   About  @relation(fields: [aboutId], references: [id], onDelete: Cascade)
}

model Hobby {
  id      Int     @id @default(autoincrement())
  name    String
  details String?
  aboutId Int
  about   About   @relation(fields: [aboutId], references: [id], onDelete: Cascade)
}

model Language {
  id      Int    @id @default(autoincrement())
  name    String
  fluency String // e.g., Basic, Conversational, Fluent, Native
  aboutId Int
  about   About  @relation(fields: [aboutId], references: [id], onDelete: Cascade)
}

model Experience {
  id          Int       @id @default(autoincrement())
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String?
  aboutId     Int
  about       About     @relation(fields: [aboutId], references: [id], onDelete: Cascade)
}

model Education {
  id           Int       @id @default(autoincrement())
  school       String
  degree       String
  fieldOfStudy String
  startDate    DateTime
  endDate      DateTime?
  aboutId      Int
  about        About     @relation(fields: [aboutId], references: [id], onDelete: Cascade)
}

model Skill {
  id      Int    @id @default(autoincrement())
  name    String @unique
  level   String // e.g., Beginner, Intermediate, Advanced, Expert
  aboutId Int
  about   About  @relation(fields: [aboutId], references: [id], onDelete: Cascade)
}

model SocialLink {
  id      Int    @id @default(autoincrement())
  name    String // e.g., GitHub, LinkedIn, Twitter
  url     String
  aboutId Int
  about   About  @relation(fields: [aboutId], references: [id], onDelete: Cascade)
}

model Certification {
  id      Int      @id @default(autoincrement())
  name    String
  issuer  String
  date    DateTime
  aboutId Int
  about   About    @relation(fields: [aboutId], references: [id], onDelete: Cascade)
}

model Testimonial {
  id      Int    @id @default(autoincrement())
  name    String
  role    String
  message String
  aboutId Int
  about   About  @relation(fields: [aboutId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id         Int        @id @default(autoincrement())
  title      String
  excerpt    String
  slug       String     @unique
  image      String
  body       String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  categories Category[] @relation("BlogPostToCategory")

  @@map("blog_posts")
}

model Project {
  id         Int        @id @default(autoincrement())
  title      String
  excerpt    String
  slug       String     @unique
  image      String
  body       String
  techUsed   String[] // Added for tech stack
  aboutId    Int? // Optional relation to About model
  about      About?     @relation(fields: [aboutId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  categories Category[] @relation("ProjectToCategory")

  @@map("projects")
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  blogPosts BlogPost[] @relation("BlogPostToCategory")
  projects  Project[]  @relation("ProjectToCategory")

  @@map("categories")
}
